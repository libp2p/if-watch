on: [pull_request, push]

name: if-watch

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
        - rust: stable
        #- rust: nightly
        platform:
        - target: x86_64-unknown-linux-gnu
          host: ubuntu-latest
          cross: false

        - target: aarch64-apple-darwin
          host: macos-latest
          cross: false

        - target: x86_64-pc-windows-msvc
          host: windows-latest
          cross: false

        - target: armv7-linux-androideabi
          host: ubuntu-latest
          cross: true
        - target: aarch64-linux-android
          host: ubuntu-latest
          cross: true

        - target: aarch64-apple-ios
          host: macos-latest
          cross: true
    env:
      RUST_BACKTRACE: 1
      CARGO_INCREMENTAL: 0
      LLVM_CONFIG_PATH: /usr/local/opt/llvm/bin/llvm-config
      NDK_HOME: /usr/local/lib/android/sdk/ndk-bundle

    runs-on: ${{ matrix.platform.host }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Cache cargo folder
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ matrix.platform.target }}-cargo-${{ matrix.toolchain.rust }}

    - name: Install dependencies ubuntu
      if: matrix.platform.host == 'ubuntu-latest'
      run: sudo apt-get install llvm-dev

    - name: Install dependencies macos
      if: matrix.platform.host == 'macos-latest'
      run: brew install llvm

    - name: Install dependencies windows
      if: matrix.platform.host == 'windows-latest'
      run: choco install llvm

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.toolchain.rust }}
        targets: ${{ matrix.platform.target }}

    - name: Install cargo-apk
      if: contains(matrix.platform.target, 'android')
      run: cargo install cargo-apk

    - name: Build
      if: contains(matrix.platform.target, 'android') == false
      run: cargo build --workspace --all-features --target ${{ matrix.platform.target }}

    - name: Build android
      if: contains(matrix.platform.target, 'android')
      run: cargo apk build --target ${{ matrix.platform.target }} --all-features

    - name: Rust tests
      if: matrix.platform.cross == false
      run: cargo test --workspace --all-features

  lint-rust:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Cache cargo folder
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: lint-cargo

    - name: Install rust toolchain
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
        components: clippy, rustfmt

    - name: cargo fmt
      run: cargo fmt --all -- --check

    - name: cargo clippy
      run: cargo clippy --workspace --all-features --examples --tests -- -D warnings

  apple-platforms:
    name: Test on ${{ matrix.name }}
    needs: gather_published_crates
    strategy:
      fail-fast: false
      matrix:
        include:
            - name: ios
              target: aarch64-apple-ios-sim
              platform: auto-ios-aarch64-sim
              unstable: false
              deviceType: iPhone-15-Pro-Max
              deviceName: my-iphone-15-pro-max
            - name: tvOS
              target: aarch64-apple-tvos-sim
              platform: auto-tvos-aarch64-sim
              unstable: true
              deviceType: Apple-TV-4K-3rd-generation-4K
              deviceName: my-4ktv
            - name: watchOS
              target: aarch64-apple-watchos-sim
              platform: auto-watchos-aarch64-sim
              unstable: true
              deviceType: Apple-Watch-Ultra-2-49mm
              deviceName: my-apple-watch
            - name: visionOS
              target: aarch64-apple-visionos-sim
              platform: auto-visionos-aarch64-sim
              unstable: true
              deviceType: Apple-Vision-Pro
              deviceName: my-apple-vision-pro
    runs-on: macos-latest
    env:
      NAME: ${{ matrix.name }}
      PLATFORM: ${{ matrix.platform }}
      DEVICE_TYPE: ${{ matrix.deviceType }}
      DEVICE_NAME: ${{ matrix.deviceName }}
      BUILD_STD: ${{ matrix.unstable && '-Z build-std' || '' }}
      PACKAGES: -p ${{ join(fromJSON(needs.gather_published_crates.outputs.members), ' -p ') }}
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.unstable }}
        with:
            targets: ${{ matrix.target }}

      - uses: dtolnay/rust-toolchain@master
        if: ${{ matrix.unstable }}
        with:
            toolchain: nightly
            components: rust-src

      - name: Check if compiles on ${{ matrix.name }}
        run: cargo check $PACKAGES --all-features --target=${{ matrix.target }} $BUILD_STD --tests

      - name: Install cargo dinghy
        uses: taiki-e/cache-cargo-install-action@v2
        with:
            tool: cargo-dinghy

      - name: Start ${{ matrix.name }} simulator
        id: boot-simulator
        run: |
            RUNTIME_ID=$(xcrun simctl list runtimes | grep $NAME | cut -d ' ' -f 7 | tail -1)
            export SIM_ID=$(xcrun simctl create $DEVICE_NAME com.apple.CoreSimulator.SimDeviceType.$DEVICE_TYPE $RUNTIME_ID)
            xcrun simctl boot $SIM_ID
            echo "sim-id=$SIM_ID" >> $GITHUB_OUTPUT

      - name: Run all tests
        env:
            SIM_ID: ${{ steps.boot-simulator.outputs.sim-id }}
        run: cargo dinghy -d $SIM_ID -p $PLATFORM test $PACKAGES --all-features $BUILD_STD

